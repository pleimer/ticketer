// Package messagesservice provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package messagesservice

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Thread
	// (GET /threads/{threadId})
	GetThreadsThreadId(ctx echo.Context, threadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetThreadsThreadId converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreadsThreadId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threadId" -------------
	var threadId string

	err = runtime.BindStyledParameterWithOptions("simple", "threadId", ctx.Param("threadId"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threadId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreadsThreadId(ctx, threadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/threads/:threadId", wrapper.GetThreadsThreadId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWT2/bPgz9KoZ+v2OQZNvNtwwDhhwGFG1vw2AwMh2rsCWNootlgb/7IMnOX7ldgBx2",
	"k0SGfOR7ZLwX0rTWaNTsRL4XTtbYQjiumEHWLWr2N0vGIrHCYJNG82DgnUWRC8ek9Fb0s9FWREPCoVIN",
	"amjTRlUmn536feqvNOMWSfT9bHwymxeU7H2/oXOwxWvUcKgoXBVjGw7/E1YiF/8tjr1YDI1YnHThmAuI",
	"YOfvG1Pu0k2Qf53hAYiVVBbSKUrgZOUzUZmmRDov5QrIZbiKTHsvaBNcDUykTIS22RVs7oXAaWUtpnM5",
	"BiI8hbgxpkHQwdhNg+SaEMpiorr7ge+0z5PCl1L1abArZWMLqknCnRi0VIbnesRzHrwkqLhQ5Y1KQ6BG",
	"oeOijfNY3FnJNbjiYqKvefZOAf+EfYLkBtgjj5UbGkt4j/Bx8xwjjLUTSlSvWL7RhItfOL9Dp71Ht5tp",
	"eWM67VFi7p+e0NsmJ+r6EZ012iX+FkpgeK/KYTb8QOEvLmRHztDEivvZeR6TyrqG5ytF2ZHi3ZPPFSF9",
	"RiCkVcf14U85lBmexSFIzWxF72MoXYW9VKKTpCwro0UuVg/rrDKUETIpfFV6m8Xllnl/aiH4zQQrbny8",
	"Qb8uWz2sxUy8IrkYaDn/MF8G9VjUYJXIxaf5cr4UXjRcB8yLGNot9vGwLnv/vI3knwN7jIDwFEcGG9Nx",
	"BpmzKFWl5IBVhKwUfNalyMVX5EiHex4SBRgELXLYIt8v0z3XmEXfbP1F+G6JPAAX44IUfAzlGVRBl0wd",
	"zoZvohSbP7xzlFVowcfl8uLrCKxtlAzYFy/Og9mfxHtfcQfVBpbPq3rqpETnqq7J6OjmJ6dtgXaxU9mo",
	"3L7v/wQAAP//Cc/1pu0JAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
