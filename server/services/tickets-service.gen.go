// Package services provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package services

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new ticket
	// (POST /tickets)
	PostTickets(ctx echo.Context) error
	// Get ticket
	// (GET /tickets/{ticketId})
	GetTicket(ctx echo.Context, ticketId string) error
	// Add a comment to a ticket
	// (POST /tickets/{ticketId}/comments)
	PostTicketsTicketIdComments(ctx echo.Context, ticketId int) error
	// Update the status of a ticket
	// (PUT /tickets/{ticketId}/status)
	PutTicketsTicketIdStatus(ctx echo.Context, ticketId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostTickets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTickets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTickets(ctx)
	return err
}

// GetTicket converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTicket(ctx, ticketId)
	return err
}

// PostTicketsTicketIdComments converts echo context to params.
func (w *ServerInterfaceWrapper) PostTicketsTicketIdComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId int

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTicketsTicketIdComments(ctx, ticketId)
	return err
}

// PutTicketsTicketIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PutTicketsTicketIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId int

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTicketsTicketIdStatus(ctx, ticketId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/tickets", wrapper.PostTickets)
	router.GET(baseURL+"/tickets/:ticketId", wrapper.GetTicket)
	router.POST(baseURL+"/tickets/:ticketId/comments", wrapper.PostTicketsTicketIdComments)
	router.PUT(baseURL+"/tickets/:ticketId/status", wrapper.PutTicketsTicketIdStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTU/kOBD9K1btHrN0s8tecgNWQn1YCQk4IYQ8caXbTPyBXQa1UP77yI7TH0l6gBkG",
	"aW6WP8qv3ntV9gtURlmjUZOH8gV8tULF0/DcKIWa4tA6Y9GRxLRQGU15gdYWoQRPTuoltAVUDjmhuOdp",
	"uTZOxREITvgXSYVQjM9IsRNKasIlujhPsvqKdD+93G4CmS8PWFE8kBGfJwzvwd0W4PAxSIcCytvNxruJ",
	"O64TqIngP5C4QF85aUkaPUnmIWKsk8ZJWsdV1EFFzI15hgIUChkUFLCSy9UO/m1MT5yC3z1pLGooQOp7",
	"68zSofcQ6fCmeUIBBVSN8Sgmg5GkBiehByveSUd7kOxDer5G3y5NAmsemghhQ9F7mTuU7MA83bZ9cQ8b",
	"6SrJcZPYGmf4gWINUObIY2Bxo9S1GREMp5cLVhvHFNd8KfWS+WCtccS6Oo1AMkU5N/Z/3ImxJNnp5QIK",
	"eELnu2DHR/OjeaQhJsSthBL+SVMFWE6rlPOsDxx5MT45KbLDI6CFgBIujafrze0xP/R0ZsR6UO7c2kZW",
	"6dzswXd26TpdHP3psIYS/phtW+Es98HZngPbfRbJBUwT3hrtO8X+nh9/8N3drftSZH5zz2E+VBV6X4em",
	"WUdOT+bzsXxnXLDMUHKDD0pxt4YSuuwYZxqfs5hpR8//7KUbLEQbwy679rcf/QKJRRsGV6Fn3HtTyYTt",
	"WdKKceYtVrKWVY7PFv9BMRDzArOWyQOOKyR0Hsrb4V03Wj4GZFKgJllLdMzUjFbYY48GhjL5CArQXEVL",
	"9inAUMFiR41hzdyN1J1/grpXGzlZf3un6smY9+wEbYjVJmgRN/47Jf9CEzrNG+bRPaFj6JxxAyNEEb+v",
	"f0xE9X+FV2vyOh877w+NhP1Joba/gbtfU/77P4pPrv/+AzZhkbzEuBCT9f8mp+xpfyoE4yzLy8gw/poV",
	"to+TDVM+CEMbdG/d72eCiZf6TU6Yf95L0GnB8q/rQwzRZZr6ao5u6l1TtO23AAAA//866HQnPAwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
