// Package services provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package services

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pleimer/ticketer/server/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Tickets
	// (GET /tickets)
	ListTicket(ctx echo.Context, params ListTicketParams) error
	// Create a new Ticket
	// (POST /tickets)
	CreateTicket(ctx echo.Context) error
	// Deletes a Ticket by ID
	// (DELETE /tickets/{id})
	DeleteTicket(ctx echo.Context, id int) error
	// Find a Ticket by ID
	// (GET /tickets/{id})
	ReadTicket(ctx echo.Context, id int) error
	// Updates a Ticket
	// (PATCH /tickets/{id})
	UpdateTicket(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListTicket converts echo context to params.
func (w *ServerInterfaceWrapper) ListTicket(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTicketParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", ctx.QueryParams(), &params.ItemsPerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemsPerPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTicket(ctx, params)
	return err
}

// CreateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTicket(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTicket(ctx)
	return err
}

// DeleteTicket converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTicket(ctx, id)
	return err
}

// ReadTicket converts echo context to params.
func (w *ServerInterfaceWrapper) ReadTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReadTicket(ctx, id)
	return err
}

// UpdateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTicket(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tickets", wrapper.ListTicket)
	router.POST(baseURL+"/tickets", wrapper.CreateTicket)
	router.DELETE(baseURL+"/tickets/:id", wrapper.DeleteTicket)
	router.GET(baseURL+"/tickets/:id", wrapper.ReadTicket)
	router.PATCH(baseURL+"/tickets/:id", wrapper.UpdateTicket)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX34/bNgz+VwRtj0aStrmH5q1bNiDAHg5b91QcCtVibHax5FJU0+Dg/32glB9O4rtL",
	"cdjWYH04xJZofqT48aPuXpe+ab0Dx0HP7jVBaL0LkF6mk4n8lN4xOJZH07YrLA2jd+OPwTtZC2UNjZGn",
	"lnwLxJi/Lr0F+eVNC3qm0TFUQLorNBB5Epuu0IENx9CzC0zoKt11hSb4FJHA6tm77G1vflfszP2Hj1Cy",
	"7sTeQigJW4kuAX42K7QKXRu5UNawUds1CWI6mV5xcgTBRypBOc9q6aPb5vT6inMqvVuusGR0ldrlFwT+",
	"5qp5GB18aaFksCoBJpc52IT3Fsu/gM/jNiFg5QAGYio02uGUWkJPyBvZtbA0ccV6pld+rQsNLjaSQn5r",
	"wGJsdKFrrOpeIgeMw5EcPDnP7wMbYrA9j8er6N635CuCEHShrXcw6J5rAmMX88H8GHkFT1cDBS/b7uPt",
	"HUIPZLhS6JY+J9iv2Nsag8KgjFMmslcVOCAjBXxzu1A9W9UYC8pHVn4p1r84VrmyysISHSaH+2y07P+R",
	"99/cLnShPwOFjDkZvRhNJHPfgjMt6pl+NZqMXkk6hutUhjEnqqTnKlPmOPDfMLDKfAojnXxRapKF3e5u",
	"ySZOyTTAIPx/d+pnXRtWralAsVcEzgKluuqZ/hSB5GCdaSQjMdJFr/cadNgIK14UZ/TsilMgZGhU6aPj",
	"A5Jq5S/7HYKUb8It0O0ZtPmSoV/e3BSPB3JXHE+6l1+pMCkGefiRYKln+ofxYYyOt7093p51t8c3RGbz",
	"gJrH1a5yaoWBs5pPHoLYBz8Wo8M0e8p22psST9m+7knv47ZilEQtNo2hzQkRhf+mEprtpO5OhMqHAQL/",
	"TGAYgjLKwXp3HsZZ4UTAwEFhYkpgT6aCc45nB3uWi1ZA4J+83TxjgjyqxP8zxX2G2J6IbC4ue1Wmmuk+",
	"DlOE7pk9eklrPhhWjsl+fRv+462VGX7UIUMd1hX7cTG+R9tlUq2A4bzr5mk9KK5h13Nr5Dq9bzsIrFrM",
	"z9stf3nZUFnMZUoeMHbyLuOtp+72jAh9jb9AyacDA72XVD8htTZB5VOxV664uxqaXQU/bNRiPqy9g3eH",
	"X9HZpymQxJiAIznR4nNG/A7Gflt8+BdVY5hgvX/PrpZewo6LuNUaLutzdv3ZWnNEz6OhXtbGVSJAj0z2",
	"7OE/p9b3+8Tz7xOX3g0OpybMiIkA39Y1Icd07c192pyD94mu+zsAAP//7dKx7iwUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
